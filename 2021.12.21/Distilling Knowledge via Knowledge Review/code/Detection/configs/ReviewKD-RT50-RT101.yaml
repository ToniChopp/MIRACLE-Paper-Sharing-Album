_BASE_: "Base-Distillation.yaml"
OUTPUT_DIR: output/ReviewKD-RT50-RT101
MODEL:
  META_ARCHITECTURE: "ReviewKDRetinaNet"
  WEIGHTS: "pretrained/r50-rt101.pth"
  BACKBONE:
    NAME: "build_retinanet_resnet_fpn_backbone"
  RESNETS:
    OUT_FEATURES: ["res3", "res4", "res5"]
    DEPTH: 50
  ANCHOR_GENERATOR:
    SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  RETINANET:
    IOU_THRESHOLDS: [0.4, 0.5]
    IOU_LABELS: [0, -1, 1]
SOLVER:
  IMS_PER_BATCH: 8
  BASE_LR: 0.005  # Note that RetinaNet uses a different default learning rate
  STEPS: (120000, 160000)
  MAX_ITER: 180000


TEACHER:
  MODEL:
    META_ARCHITECTURE: "RetinaNet"
    BACKBONE:
      NAME: "build_retinanet_resnet_fpn_backbone"
    RESNETS:
      OUT_FEATURES: ["res3", "res4", "res5"]
      DEPTH: 101
    ANCHOR_GENERATOR:
      SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
    FPN:
      IN_FEATURES: ["res3", "res4", "res5"]
    RETINANET:
      IOU_THRESHOLDS: [0.4, 0.5]
      IOU_LABELS: [0, -1, 1]

KD:
  USE_REVIEWKD: True
  REVIEWKD_LOSS_WEIGHT: 1.0

INPUT:
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)

VERSION: 2
